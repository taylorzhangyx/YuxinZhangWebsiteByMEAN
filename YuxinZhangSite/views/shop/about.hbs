<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
<script type="text/javascript" src="/javascripts/shop/about.js"></script>


<div class="container">

  {{> shopnav}}

  <!-- sidebar -->
  <div class="row">
    <div class="col-sm-4 col-md-3 sidebar">
      <div class="mini-submenu">
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </div>
      <div class="list-group">
        <span href="#" class="list-group-item active">
            Submenu
            <span class="pull-right" id="slide-submenu">
                <i class="fa fa-times"></i>
            </span>
        </span>
        <a href="#" class="list-group-item">
          <i class="fa fa-comment-o"></i> Lorem ipsum
        </a>
        <a href="#" class="list-group-item">
          <i class="fa fa-search"></i> Lorem ipsum
        </a>
        <a href="#" class="list-group-item">
          <i class="fa fa-user"></i> Lorem ipsum
        </a>
        <a href="#" class="list-group-item">
          <i class="fa fa-folder-open-o"></i> Lorem ipsum <span class="badge">14</span>
        </a>
        <a href="#" class="list-group-item">
          <i class="fa fa-bar-chart-o"></i> Lorem ipsumr <span class="badge">14</span>
        </a>
        <a href="#" class="list-group-item">
          <i class="fa fa-envelope"></i> Lorem ipsum
        </a>
      </div>
    </div>


    <div class="content col-sm-8 col-md-9">
      <h1>About Yuxin's Shop</h1>
      <h2>Introduction</h2>
      <p>This eCommerce website based on Node.js, Express, MongoDB with various middle ware that enables Various API.</p>

<!--  model schema in database, RESTful API -->
      <h2>Schema</h2>
      <h3>Product</h3>
<pre>
{
  name: {type: String, required: true},
  category: {type: String, retuqired: true, default: 'new'},
  picture: {type: String, required: true},
  description: {type: String, required: true},
  price: {type: Number, required: true},
  soldnum: {type: Number, required: true, default: 0},
  seller: {type: String, required: true},
  postdate: {type: Date, default: Date.now},
  upvote: {type: Number, default: 0},
  downvote: {type: Number, default: 0 }
}
</pre>
      <p>Porduct schema desines basic information about one product include all above</p>
      <p><code>category</code> is one predefiend field, you should choose amony the following options:</p>
      <ul>
        <li>Book</li>
        <li>Movie</li>
        <li>Game</li>
        <li>Music</li>
        <li>Food</li>
        <li>Other</li>
      </ul>
      <p><code>picture</code> is the address to online link, you can store the picture on any cloud server then past the picture link here.</p>
      <p><code>price</code> is the number stands for the price of this product in USD.</p>
      <p><code>seller</code> will auto filled when the user add product to stock with the user's email address.</p>
      <p><code>postdate</code> is the date and time that this product was added to stock. This field is auto filled based on server time.</p>

      <h3>User</h3>
      <pre>
{
  email: {type: String, required: true},
  password: {type: String, required: true},
  signUpDate: { type: Date, default: Date.now},
  lastLogin: { type: Date, default: Date.now},
  address: { type: String},
  cart: { type: Schema.Types.ObjectId, ref: 'Cart' }
}
</pre>
      <p>User schema defines basic user information</p>
      <p><code>email</code> is the email address that user used for login and receive email from system. This needs to be a valid email to register.</p>
      <p><code>password</code> is the user password that encripted with <a href="https://www.npmjs.com/package/bcryptjs">bcryptjs</a>.</p>
      <p><code>signUpDate</code> is the date that this user registerd. This is generated by system when this user first signup.</p>
      <p><code>lastLogin</code> is the date taht this user last login. System will update this date everytime when this the user login.</p>
      <p><code>address</code> is the shipping address of user.</p>
      <p><code>cart</code> is an uniqe id of cart in database, corresponding to the uniqe cart object of this user. A reference to the history of this user;s shopping cart.</p>

      <h3>Cart</h3>
<pre>
{
  item: [{type: Schema.Types.ObjectId, ref: 'Item'}],
  totalQty: {type: Number, default: 0},
  totalPrice: {type: Number, default: 0, get: getPrice, set: setPrice},
  user: {type: Schema.Types.ObjectId, ref: 'User'}
}
</pre>
      <p>Cart schema defines a collection of product that in user cart and the totol price and total quantity.</p>
      <p><code>item</code> is an array of <b>Item</b> that represents the selected products in user's cart.</p>
      <p><code>totalQty</code> is the total number of products in user's shopping cart.</p>
      <p><code>totalPrice</code> is the total price of products in user's shopping cart in <b>USD</b>.</p>
      <p><code>user</code> is an unique id of user that is the reference to this cart's owner.</p>

      <h3>Item</h3>
      <pre>
{
  product: {type: Schema.Types.ObjectId, ref: 'Product'},
  quantity: {type: Number, default: 0},
  sumPrice: {type: Number, default: 0, get: getPrice, set: setPrice},
  cart:  {type: Schema.Types.ObjectId, ref: 'Cart'}
}
</pre>
      <p>Item schema defines the product that selected by user. It contains:</p>
      <p><code>product</code> is the reference of selected product, with the value of product id, represent the unique product in this shopping cart.</p>
      <p><code>quantity</code> is the number of this product that the user selected. </p>
      <p><code>sumPrice</code> is the total price of this kind of product with the number of quantity.</p>
      <p><code>cart</code> is a reference to shopping cart that hold this Item.</p>

      <h3>Order</h3>
      <pre>
{
  user: {type: Schema.Types.ObjectId, ref: 'User'},
  cart: {type: Object, required: true},
  address: {type: String, required: true},
  name: {type: String, required: true},
  paymentId: {type: String, required: true}
}
</pre>
      <p>Order is a record of user payment.</p>
      <p><code>user</code> is a reference to the user that pay this bill.</p>
      <p><code>cart</code> is a cart object that stores all the product in cart when make this payment. This include all the product information.</p>
      <p><code>address</code> is the address these products need to ship to.</p>
      <p><code>name</code> is the buyer's name which will be printed on the shipping package.</p>
      <p><code>paymentId</code> is an unique id that provided by stripe that used to track the payment in stripe payment system.</p>

      <!-- shopping page API -->
      <h2>Shop API</h2>

      <h3>Products Display</h3>
      <p><span class="label label-success">GET</span><pre>/shop</pre></p>
      <p>Loop through products in database and return an object include products, error message and current shopping cart.</p>
      <p><span class="label label-warning">RETURE</span></p>
      <pre>
{
  products: [Product],
  msg: String,
  cart: Cart
}
</pre>
      <p><code>products</code> is an Array of Product object.</p>
      <p><code>msg</code> is a String that represents successmsg if exists.</p>
      <p><code>cart</code> is the current shopping cart object that this user have.</p>


      <h3>Products Display on Category</h3>
      <p><span class="label label-success">GET</span><pre>/shop/:category</pre></p>
      <p>Loop through products in database and return an object include products in matched category, error message and current shopping cart.</p>
      <p><span class="label label-primary">Params</span></p>
      <p><code>category</code>: one of the predefined category among <b>Book</b>, <b>Movie</b>, <b>Game</b>, <b>Music</b>, <b>Food</b> and <b>Other</b>.</p>
      <p><span class="label label-warning">RETURE</span></p>
      <pre>
{
  products: [Product],
  msg: String,
  cart: Cart
}
</pre>
      <p><code>products</code> is an Array of Product object that is in the category.</p>
      <p><code>msg</code> is a String that represents successmsg if exists.</p>
      <p><code>cart</code> is the current shopping cart object that this user have.</p>
      <!-- End of shopping page API -->

      <!-- shopping cart related API -->
      <h2>Shopping Cart API</h2>

      <h3>Cart Display</h3>
      <p><span class="label label-success">GET</span><pre>/shop/cart</pre></p>
      <p>If the user is loged in, This API will retrive cart object from database with the reference to unique shopping cart on this user.</p>
      <p>if the user not loged in, this API will visit temporary seesion to access cart object.</p>
      <p><span class="label label-warning">RETURE</span></p>
      <pre>
{
  cart: Cart
}
</pre>
      <p><code>cart</code> is an Cart object.</p>
      <!-- End of Shopping cart related API -->


      <!-- User function related API -->
      <h2>User API</h2>

      <h3>Products Display on Category</h3>
      <p><span class="label label-success">GET</span><pre>/shop/:category</pre></p>
      <p>Loop through products in database and return an object include products in matched category, error message and current shopping cart.</p>
      <p><span class="label label-primary">Params</span></p>
      <p><code>category</code>: one of the predefined category among <b>Book</b>, <b>Movie</b>, <b>Game</b>, <b>Music</b>, <b>Food</b> and <b>Other</b>.</p>
      <p><span class="label label-warning">RETURE</span></p>
      <pre>
{
  products: [Product],
  msg: String,
  cart: Cart
}
</pre>
      <p><code>products</code> is an Array of Product object that is in the category.</p>
      <p><code>msg</code> is a String that represents successmsg if exists.</p>
      <p><code>cart</code> is the current shopping cart object that this user have.</p>
      <!-- End of  User function related API -->

    </div>
  </div>





</div>
